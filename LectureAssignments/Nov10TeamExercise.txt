Question 1:
  Function 1 is not pure because it's directly modifying the inputted list by deleting the data inside the list directly
  Funciton 2 is not pure because the copy it's creating is merely a reference to the same list, and so it's still modifying that original list
  Function 3 is pure because it's creating a new list that's a perfect copy of the list passed in and then modifying and returning that, not modifying the the original list
  Function 4 is pure because it's creating a new list and then adding to it from alist to create the same result without modifying alist, only accessing
  Function 5 is pure because it's creating a new list and adding to it as in function 4 but then is assinging it to alist. This is not modifying alist itself, but simply modifying the reference alist carries within the function. The list alist still exists outside of function 5 and has not been modified directly.
  Function 6 is pure because it's creating a new list and then adding to it as in 4 which is completely isolated from the other list
  Function 7 is not pure because it's modifying the list directly as in function 1.

Question 2:
  Function 7 will crash with the parameters [1,2,3,4] and 3 because it's looping through the range created at the beginning, but because the original list is being modified, that list becomes shorter. If that list becomes shorter, all of a sudden, index 3 does not exist, and therefore when the loop requests that index, it will throw an out of bounds error.

Question 3:
  Function 1 is not a very good function as it's not pure and could cause problems elsewhere in the code. It's also more complex to declare the other parameters in range so that it loops backwards than necessary.
  Function 2 is not a very good function as it doesn't fix the the problems identified in 1, it just copies the reference to a new variable creating a needles variable.
  Fucntion 3 is pure, however it would use more memory as it is doubling the inputted list and then taking elements out. It would be more efficient to construct a new list.
  Function 4 is a pure function that is coded more efficiently than function 6 in that it's a shorter statement to append the number to result, it's much more efficient in time and memory using append than concatenation, and it's also very readable. It's more efficient than 3 as well because it's not doubling the number of elements in storage.
  Function 5 is pure and is using append, but it has an unnecessary reasssingment of alist at the end. It's more than sufficient to return temp. Temp is also a less self-documenting name than result.
  Function 6 is a pure function and is nearly the same as function 4, the only difference in that it's less efficient to assign result using concatenation instead of using append.
  Function 7 has all of the faults of fucntion 1 as well as the fault that on any case where it deletes an element except when it only deletes the last element, it will create an out of bounds error because of the fact that it's not pure.

Question 4:
  Function 4 would be the best design because, as mentioned in question 3, it's readable, the most efficient, and is pure.